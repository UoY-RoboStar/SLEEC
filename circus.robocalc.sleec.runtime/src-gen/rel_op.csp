include "tick-tock.csp"


channel E0
channel E1
channel m0 : Int
channel m1 : Int
	
Capabilities = 
  {| E0,
     E1,
  	 m0,
  	 m1
  |}
Measures =
  {| m0,
     m1
  |}
	
instance MSN = MS(Capabilities)
Timed(et) {

-- Rule0 when E0 and ((m0) == (m1)) then E1 

Rule0 = TriggerRule0; MonitoringRule0; Rule0

TriggerRule0 = let
	MTrigger = StartBy(m0?vm0 ->
		StartBy(m1?vm1 ->
			if ((vm0) == (vm1)) then SKIP else TriggerRule0
		,0)
	,0)
within E0 -> MTrigger

MonitoringRule0 = E1 -> SKIP

-- alphabet for Rule0 
ARule0 = {|m0, m1, E0, E1|}
SLEECRule0 = timed_priority(Rule0)


-- Rule1 when E0 and ((m0) != (m1)) then E1 

Rule1 = TriggerRule1; MonitoringRule1; Rule1

TriggerRule1 = let
	MTrigger = StartBy(m0?vm0 ->
		StartBy(m1?vm1 ->
			if ((vm0) != (vm1)) then SKIP else TriggerRule1
		,0)
	,0)
within E0 -> MTrigger

MonitoringRule1 = E1 -> SKIP

-- alphabet for Rule1 
ARule1 = {|m0, m1, E0, E1|}
SLEECRule1 = timed_priority(Rule1)


-- Rule2 when E0 and ((m0) > (m1)) then E1 

Rule2 = TriggerRule2; MonitoringRule2; Rule2

TriggerRule2 = let
	MTrigger = StartBy(m0?vm0 ->
		StartBy(m1?vm1 ->
			if ((vm0) > (vm1)) then SKIP else TriggerRule2
		,0)
	,0)
within E0 -> MTrigger

MonitoringRule2 = E1 -> SKIP

-- alphabet for Rule2 
ARule2 = {|m0, m1, E0, E1|}
SLEECRule2 = timed_priority(Rule2)


-- Rule3 when E0 and ((m0) < (m1)) then E1 

Rule3 = TriggerRule3; MonitoringRule3; Rule3

TriggerRule3 = let
	MTrigger = StartBy(m0?vm0 ->
		StartBy(m1?vm1 ->
			if ((vm0) < (vm1)) then SKIP else TriggerRule3
		,0)
	,0)
within E0 -> MTrigger

MonitoringRule3 = E1 -> SKIP

-- alphabet for Rule3 
ARule3 = {|m0, m1, E0, E1|}
SLEECRule3 = timed_priority(Rule3)


-- Rule4 when E0 and ((m0) >= (m1)) then E1 

Rule4 = TriggerRule4; MonitoringRule4; Rule4

TriggerRule4 = let
	MTrigger = StartBy(m0?vm0 ->
		StartBy(m1?vm1 ->
			if ((vm0) >= (vm1)) then SKIP else TriggerRule4
		,0)
	,0)
within E0 -> MTrigger

MonitoringRule4 = E1 -> SKIP

-- alphabet for Rule4 
ARule4 = {|m0, m1, E0, E1|}
SLEECRule4 = timed_priority(Rule4)


-- Rule5 when E0 and ((m0) <= (m1)) then E1 

Rule5 = TriggerRule5; MonitoringRule5; Rule5

TriggerRule5 = let
	MTrigger = StartBy(m0?vm0 ->
		StartBy(m1?vm1 ->
			if ((vm0) <= (vm1)) then SKIP else TriggerRule5
		,0)
	,0)
within E0 -> MTrigger

MonitoringRule5 = E1 -> SKIP

-- alphabet for Rule5 
ARule5 = {|m0, m1, E0, E1|}
SLEECRule5 = timed_priority(Rule5)


	
-- ASSERTIONS --

-- Checking Rule0 with Rule1:

intersectionRule0Rule1 = Rule0[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule1
SLEECRule0Rule1 = timed_priority(intersectionRule0Rule1)

assert SLEECRule0Rule1:[deadlock-free]					
assert not MSN::C3(SLEECRule0Rule1) [T= MSN::C3(SLEECRule0)

assert not MSN::C3(SLEECRule0) [T= MSN::C3(SLEECRule0Rule1)


-- Checking Rule0 with Rule2:

intersectionRule0Rule2 = Rule0[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule2
SLEECRule0Rule2 = timed_priority(intersectionRule0Rule2)

assert SLEECRule0Rule2:[deadlock-free]					
assert not MSN::C3(SLEECRule0Rule2) [T= MSN::C3(SLEECRule0)

assert not MSN::C3(SLEECRule0) [T= MSN::C3(SLEECRule0Rule2)


-- Checking Rule0 with Rule3:

intersectionRule0Rule3 = Rule0[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule3
SLEECRule0Rule3 = timed_priority(intersectionRule0Rule3)

assert SLEECRule0Rule3:[deadlock-free]					
assert not MSN::C3(SLEECRule0Rule3) [T= MSN::C3(SLEECRule0)

assert not MSN::C3(SLEECRule0) [T= MSN::C3(SLEECRule0Rule3)


-- Checking Rule0 with Rule4:

intersectionRule0Rule4 = Rule0[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule4
SLEECRule0Rule4 = timed_priority(intersectionRule0Rule4)

assert SLEECRule0Rule4:[deadlock-free]					
assert not MSN::C3(SLEECRule0Rule4) [T= MSN::C3(SLEECRule0)

assert not MSN::C3(SLEECRule0) [T= MSN::C3(SLEECRule0Rule4)


-- Checking Rule0 with Rule5:

intersectionRule0Rule5 = Rule0[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule5
SLEECRule0Rule5 = timed_priority(intersectionRule0Rule5)

assert SLEECRule0Rule5:[deadlock-free]					
assert not MSN::C3(SLEECRule0Rule5) [T= MSN::C3(SLEECRule0)

assert not MSN::C3(SLEECRule0) [T= MSN::C3(SLEECRule0Rule5)


-- Checking Rule1 with Rule2:

intersectionRule1Rule2 = Rule1[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule2
SLEECRule1Rule2 = timed_priority(intersectionRule1Rule2)

assert SLEECRule1Rule2:[deadlock-free]					
assert not MSN::C3(SLEECRule1Rule2) [T= MSN::C3(SLEECRule1)

assert not MSN::C3(SLEECRule1) [T= MSN::C3(SLEECRule1Rule2)


-- Checking Rule1 with Rule3:

intersectionRule1Rule3 = Rule1[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule3
SLEECRule1Rule3 = timed_priority(intersectionRule1Rule3)

assert SLEECRule1Rule3:[deadlock-free]					
assert not MSN::C3(SLEECRule1Rule3) [T= MSN::C3(SLEECRule1)

assert not MSN::C3(SLEECRule1) [T= MSN::C3(SLEECRule1Rule3)


-- Checking Rule1 with Rule4:

intersectionRule1Rule4 = Rule1[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule4
SLEECRule1Rule4 = timed_priority(intersectionRule1Rule4)

assert SLEECRule1Rule4:[deadlock-free]					
assert not MSN::C3(SLEECRule1Rule4) [T= MSN::C3(SLEECRule1)

assert not MSN::C3(SLEECRule1) [T= MSN::C3(SLEECRule1Rule4)


-- Checking Rule1 with Rule5:

intersectionRule1Rule5 = Rule1[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule5
SLEECRule1Rule5 = timed_priority(intersectionRule1Rule5)

assert SLEECRule1Rule5:[deadlock-free]					
assert not MSN::C3(SLEECRule1Rule5) [T= MSN::C3(SLEECRule1)

assert not MSN::C3(SLEECRule1) [T= MSN::C3(SLEECRule1Rule5)


-- Checking Rule2 with Rule3:

intersectionRule2Rule3 = Rule2[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule3
SLEECRule2Rule3 = timed_priority(intersectionRule2Rule3)

assert SLEECRule2Rule3:[deadlock-free]					
assert not MSN::C3(SLEECRule2Rule3) [T= MSN::C3(SLEECRule2)

assert not MSN::C3(SLEECRule2) [T= MSN::C3(SLEECRule2Rule3)


-- Checking Rule2 with Rule4:

intersectionRule2Rule4 = Rule2[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule4
SLEECRule2Rule4 = timed_priority(intersectionRule2Rule4)

assert SLEECRule2Rule4:[deadlock-free]					
assert not MSN::C3(SLEECRule2Rule4) [T= MSN::C3(SLEECRule2)

assert not MSN::C3(SLEECRule2) [T= MSN::C3(SLEECRule2Rule4)


-- Checking Rule2 with Rule5:

intersectionRule2Rule5 = Rule2[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule5
SLEECRule2Rule5 = timed_priority(intersectionRule2Rule5)

assert SLEECRule2Rule5:[deadlock-free]					
assert not MSN::C3(SLEECRule2Rule5) [T= MSN::C3(SLEECRule2)

assert not MSN::C3(SLEECRule2) [T= MSN::C3(SLEECRule2Rule5)


-- Checking Rule3 with Rule4:

intersectionRule3Rule4 = Rule3[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule4
SLEECRule3Rule4 = timed_priority(intersectionRule3Rule4)

assert SLEECRule3Rule4:[deadlock-free]					
assert not MSN::C3(SLEECRule3Rule4) [T= MSN::C3(SLEECRule3)

assert not MSN::C3(SLEECRule3) [T= MSN::C3(SLEECRule3Rule4)


-- Checking Rule3 with Rule5:

intersectionRule3Rule5 = Rule3[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule5
SLEECRule3Rule5 = timed_priority(intersectionRule3Rule5)

assert SLEECRule3Rule5:[deadlock-free]					
assert not MSN::C3(SLEECRule3Rule5) [T= MSN::C3(SLEECRule3)

assert not MSN::C3(SLEECRule3) [T= MSN::C3(SLEECRule3Rule5)


-- Checking Rule4 with Rule5:

intersectionRule4Rule5 = Rule4[|inter({|m0, m1, E0, E1|}, {|m0, m1, E0, E1|})|]Rule5
SLEECRule4Rule5 = timed_priority(intersectionRule4Rule5)

assert SLEECRule4Rule5:[deadlock-free]					
assert not MSN::C3(SLEECRule4Rule5) [T= MSN::C3(SLEECRule4)

assert not MSN::C3(SLEECRule4) [T= MSN::C3(SLEECRule4Rule5)



}
