interface IMeasures {
	event praying : boolean
	event personAssent : boolean
}

interface IUserBasicSupport {
	event personAssent : boolean
event emergencyLevel : Emergency
	event DetectUserFallen
}

enumeration Stress { low moderate high } enumeration Emergency { E1 E2 E3 E4 E5 } 

interface ISupport {
	CallSupport ( )
} interface IAdvancedSupport {
	event praying : boolean

	event timeSinceLastMeal : int

	event time : int
}

interface IInform {
	InformUser ( )
}

interface IMeals {
	event StartLunchTime
	event StartDinnerTime
} stm BasicSupport {
	initial i0
	state Idle {
	}
	transition t0 {
		from i0
		to Idle
	}
uses IUserBasicSupport requires ISupport var assent : boolean
	var level : Emergency
	junction j0
	transition t1 {
		from Idle
		to j0
		trigger DetectUserFallen
		action ( emergencyLevel ? level ; personAssent ? assent ) <{ 0 }
	}
	transition t2 {
		from j0
		to Idle
		condition gte(level,Emergency :: E2) /\ lt(level,Emergency :: E4) /\ (not assent)
	}
	transition t3 {
		from j0
		to Idle
		condition gte(level,Emergency :: E4) \/ assent
		action CallSupport ( )
	}
transition t4 {
		from j0
		to Idle
		condition lt(level,Emergency :: E2) /\ (not assent)
		action wait(180)
	}
}

stm AdvancedSupport {
	uses IAdvancedSupport var now : int = 0 , meal : int
	initial i0
	state Idle {
	}
	junction j0
	state Lunch {
	initial i0
		junction j0
		final f0
		transition t0 {
			from i0
			to j0
		}
		transition t1 {
			from j0
			to f0
			condition p \/ ( now - meal ) > MAX_TIME
		}
		transition t2 {
			from j0
			to f0
			condition not ( p \/ ( now - meal ) > MAX_TIME )
			action InformUser ( )
		}
		entry StartLunchTime ; timeSinceLastMeal ! ( now - meal ) ; praying ? p <{ 0 }
	}
	transition t0 {
		from i0
		to Idle
	}
	transition t1 {
		from Idle
		to j0
		trigger 
	time ? now
	}
	transition t2 {
		from j0
		to Lunch
		condition now >= 12 /\ now <= 13
	}
	uses IMeals requires IInform var p : boolean
	const MAX_TIME : int
	transition t3 {
		from j0
		to Idle
		condition now >= 18 /\ now <= 19
		action StartDinnerTime ; timeSinceLastMeal ! ( now - meal ) ; meal = now
	}
	transition t5 {
		from j0
		to Idle
		condition now < 12 \/ now > 19
	}
transition t6 {
		from Lunch
		to Idle
	}
}

function lt(l1:Emergency,l2:Emergency):boolean {}
function gte(l1:Emergency,l2:Emergency):boolean {}
